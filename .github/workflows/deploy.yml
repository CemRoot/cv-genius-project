name: Build and Deploy CVGenius

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GOOGLE_CLOUD_PROJECT: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
  GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
  GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

jobs:
  # Backend Tests and Deployment
  backend:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      working-directory: ./backend
      run: |
        pytest tests/ -v --tb=short
      env:
        GEMINI_API_KEY: test-key
        GOOGLE_CLOUD_PROJECT: test-project

    - name: Run linting
      working-directory: ./backend
      run: |
        flake8 app/ --max-line-length=100
        black --check app/

    - name: Authenticate to Google Cloud
      if: github.ref == 'refs/heads/main'
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}

    - name: Set up Cloud SDK
      if: github.ref == 'refs/heads/main'
      uses: google-github-actions/setup-gcloud@v1

    - name: Configure Docker for Artifact Registry
      if: github.ref == 'refs/heads/main'
      run: gcloud auth configure-docker us-central1-docker.pkg.dev

    - name: Build and push Docker image
      if: github.ref == 'refs/heads/main'
      working-directory: ./backend
      run: |
        IMAGE_URI=us-central1-docker.pkg.dev/${{ secrets.GOOGLE_CLOUD_PROJECT }}/cvgenius/backend:${{ github.sha }}
        docker build -t $IMAGE_URI .
        docker push $IMAGE_URI

    - name: Deploy to Cloud Run
      if: github.ref == 'refs/heads/main'
      run: |
        gcloud run deploy cvgenius-backend \
          --image=us-central1-docker.pkg.dev/${{ secrets.GOOGLE_CLOUD_PROJECT }}/cvgenius/backend:${{ github.sha }} \
          --platform=managed \
          --region=us-central1 \
          --allow-unauthenticated \
          --set-env-vars="GOOGLE_CLOUD_PROJECT=${{ secrets.GOOGLE_CLOUD_PROJECT }}" \
          --set-secrets="GEMINI_API_KEY=GEMINI_API_KEY:latest" \
          --memory=2Gi \
          --cpu=2 \
          --timeout=3600 \
          --max-instances=10 \
          --min-instances=0

  # Frontend Tests and Deployment
  frontend:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run linting
      working-directory: ./frontend
      run: npm run lint

    - name: Run type checking
      working-directory: ./frontend
      run: npm run type-check

    - name: Build application
      working-directory: ./frontend
      run: npm run build
      env:
        NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
        NEXT_PUBLIC_GA_ID: ${{ secrets.NEXT_PUBLIC_GA_ID }}
        NEXT_PUBLIC_ADSENSE_ID: ${{ secrets.NEXT_PUBLIC_ADSENSE_ID }}

    # Deployment to Vercel is handled by Vercel's GitHub integration
    # This job just ensures the build succeeds

  # Security scanning
  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'